(ns jepsen.raftstore
  (:require [clojure.tools.logging :refer :all]
            [clojure.string :as str]
            [clj-http.client :as cljclient]
            [jepsen [cli :as cli]
			 [core :as jepsen]
             [control :as c]
             [generator :as gen]
			 [client :as client]
             [db :as db]
             [tests :as tests]]
            [jepsen.control.util :as cu]
			[cheshire.core :as json]
            [jepsen.os.debian :as debian]))

(def raftstore-dir "/export/raftstore")
(def bin-name "raftstore")
(def service-port "8817")
(def server-addrs "n1:8817,n2:8817,n3:8817,n4:8817,n5:8817")
(def config-file "/export/raftstore/raftsrv.toml")
(def log-dir "/export/raftstore/log")
(def data-dir "/export/raftstore/data")
(def log-level "info")
(def raft-level "info")
(def pid-file "/export/raftstore/raftsrv.pid")
(def start_sh "start.sh")

(def dir     "/export/raftstore")
(def binary  "raftstore")
(def logfile (str dir "/raftstore.log"))
(def pidfile (str dir "/raftstore.pid"))
(def env "LD_LIBRARY_PATH=/export/rocksdb-master")

(def raftclt "clt")

(def obj_set "/obj/create")
(def obj_get "/obj/get")
(def obj_del "/obj/delete")

(defn server-addr
  [node]
  (str (name node) ))

(defn obj-set! 
  [node objId objVal] 
  (def res (->> (str "http://" node ":" service-port obj_set)
                (#(cljclient/post % {:form-params {:obj_id objId
                                                   :obj_val objVal}}))))
  (if ( = (get res :status) 200)
  (str "status: " (get res :status)))
  (get res :body))

(defn obj-get! 
  [node objId] 
  (def res (->> (str "http://" node ":" service-port obj_set)
                (#(cljclient/get % {:form-params {:obj_id objId}}))))
  (if ( = (get res :status) 200)
  (str "status: " (get res :status)))
  (get res :body))

(defn raftstore-get! 
  "Get a value "
  [node objId]
  (c/on node
        (c/su 
          (c/cd "/root"
                (c/exec raftclt 
                        :-host server-addr
                        :-port service-port
                        :-obj_id objId
                        :-method "get")))))
 
(defn raftstore-set! 
  "Set a value "
  [node id value]
  (c/on node 
        (c/su 
          (c/cd "/root"
                (c/exec raftclt 
                        :-host server-addr
                        :-port service-port
                        :-obj_id id 
                        :-obj_val value
                        :-method "create")))))

(def timeout-msg-pattern  
  (re-pattern "Exiting due to RaftStore::Client::Exception: Client-specified timeout elapsed"))

(defn r   [_ _] {:type :invoke, :f :read, :value nil})
(defn w   [_ _] {:type :invoke, :f :write, :value (rand-int 5)})

(defn rsclient [node]
  (reify client/Client
    (invoke! [_ test op]
      (info (str "Node: " node))
      (case (:f op)
        :read (assoc op :type :ok, :value (obj-get! node "testobj"))))
  
    (teardown! [this test])
  
    (close! [_ test])))

(defn db
  "raftstore DB" 
  []
  (reify db/DB
    (setup! [_ test node]
            (info node "set up")
			(c/su 
              ; Remove log file first.
              (c/exec :rm :-rf log-dir)
              (c/exec :mkdir log-dir)
              (cu/start-daemon! 
                {:logfile logfile
                 :pidfile pidfile
                 :chdir   dir}
                binary
                :-c config-file) 
              (Thread/sleep 8000)
              ))
                
    (teardown! [_ test node]
               ;(stop! node)
               (cu/stop-daemon! binary pidfile)
               (c/su 
                 (c/exec :rm :-rf data-dir)
                 (c/exec :mkdir data-dir))
               (info node "tore down"))))

(defn raftstore-test
  "test xxx---xxx"
  [opts]
  (merge tests/noop-test
         opts
         {:name "raftstore"
          :os   debian/os
          :db   (db )
          :client (rsclient nil)
          :generator (->> r
                          (gen/stagger 1)
                          (gen/nemesis nil)
                          (gen/time-limit 15))}))

(defn -main
  "Handles command line arguments. Can either run a test, or a web server for
  browsing results."
  [& args]
  (cli/run! (merge (cli/single-test-cmd {:test-fn raftstore-test})
                   (cli/serve-cmd))
            args))
